{-

  TASK 3 - Message validation.
  Write the method that checks that cell contains valid message
  in accordance to https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L155
  Note, tests will only cover valid and invalid MessageAny objects,
  valid MessageRelaxed (which are not simultaneously MessageAny) will not be presented
  If message is invalid for any reason - method should return (0, null), otherwise
  it should return (-1, [slice src, slice dest, int amount] ), where src, dest and
  amount represents source of the message, destination of the message and attached
  amount of TONs. If any of those values are not presented (or presented as
  addr_none slice) in the message cell - they should be substituted with null.
  It is guaranteed that for all tests any HashmapE datatype in message structure
  is empty hashmaps (has hme_empty constructor).
  Documentation on TL-B schemes can be found in https://ton.org/docs/#/overviews/TL-B
-}

() recv_internal() {
}

;; testable
(int, tuple) validate_message(cell message) method_id {

    var invalid_message = (0, null());
    slice src = null();
    slice dst = null();
    slice anc = null();
    int depth = 0;
    int grams = null();

    slice cs = message.begin_parse();
    if ( message.cell_null?() | message.dict_empty?() | (cs.slice_bits() < 2))
            {
                return invalid_message;
            }

    int msgtype = cs~load_uint(1);
    if (msgtype > 1) {
        return invalid_message;
    }

    if (msgtype == 0)
            ;; internal message
            {
                ;; CommonMsgInfo - int_msg_info$0
                ;;int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
                ;;src:MsgAddressInt dest:MsgAddressInt
                ;;value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
                ;;created_lt:uint64 created_at:uint32 = CommonMsgInfo;

                ;;message$_ {X:Type} info:CommonMsgInfo
                ;;init:(Maybe (Either StateInit ^StateInit))
                ;;body:(Either X ^X) = Message X;
                if (cs.slice_bits() < 6) {
                    return invalid_message;
                }
                var flags = cs~load_uint(3);
                ;; (anycast src dst)

                {-SRC reading-}
                int addr_type_src = cs~load_uint(2);
                int anycast = cs~load_uint(1);
                if (anycast) {
                    if (cs.slice_bits() < 33) {
                        return invalid_message;
                    }
                    int depth = cs~load_uint(32);
                    if (cs.slice_bits() < depth) {
                        return invalid_message;
                    }
                    slice anc = cs~load_bits(depth); ;; save anycast
                }
                if (addr_type_src == 2)
                        ;;                 addr_std$10 anycast:(Maybe Anycast)
                        ;;                 workchain_id:int8 address:bits256  = MsgAddressInt;
                        ;; (src dst)
                        {
                            if (cs.slice_bits() < (8 + 256))
                                    {
                                        return invalid_message;
                                    }
                            int wc = cs~load_int(8);
                            ;;src = cs~load_bits(256); ;; copy of slice?

                            int srcint = cs~load_uint(256);
                            builder bsrc = begin_cell()
                                    .store_uint(2, 2) ;; addr_std$10
                                    .store_uint(0, 1); ;; anycast nothing
                            if (anycast == 1)
                                    {
                                        throw(55);
                                        bsrc.store_uint(depth, 32).store_slice(anc); ;;writing anycast
                                    }
                            src = bsrc.store_int(-1, 8) ;; workchain_id: -1
                                    .store_uint(srcint, 256)
                                    .end_cell()
                                    .begin_parse();

                            ;;throw(55);
                        }
                        elseif (addr_type_src == 3)
                                ;;                 addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
                                ;;                 workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
                                {
                                    if (cs.slice_bits() < 42 ) {
                                        return invalid_message;
                                    }
                                    int addr_len = cs~load_uint(9);
                                    int wc = cs~load_int(32);
                                    if (cs.slice_bits() < addr_len ) {
                                        return invalid_message;
                                    }
                                    int intsrc = cs~load_uint(addr_len);
                                    src = begin_cell()
                                            .store_uint(3,2) ;; addr_var$11
                                            .store_uint(0, 1) ;; anycast
                                            .store_uint(addr_len, 9) ;; addr_len
                                            .store_uint(intsrc, addr_len)
                                            .end_cell()
                                            .begin_parse();
                                }
                                else {
                                    return invalid_message;
                                }

                {-DST reading-}
                if (cs.slice_bits() < 3) {
                    return invalid_message;
                }
                int addr_type_dst = cs~load_uint(2);
                int anycast = cs~load_uint(1);
                if (anycast) {
                    if (cs.slice_bits() < 33) {
                        return invalid_message;
                    }
                    int depth = cs~load_uint(32);
                    if (cs.slice_bits() < depth) {
                        return invalid_message;
                    }
                    slice anc = cs~load_bits(depth); ;; save anycast
                }
                if (addr_type_dst == 2)
                        ;;                 addr_std$10 anycast:(Maybe Anycast)
                        ;;                 workchain_id:int8 address:bits256  = MsgAddressInt;
                        {
                            if (cs.slice_bits() < (8 + 256))
                                    {
                                        return invalid_message;
                                    }
                            int wc = cs~load_int(8);
                            int dstint = cs~load_uint(256);
                            builder bdst = begin_cell()
                                    .store_uint(2, 2) ;; addr_std$10
                                    .store_uint(anycast, 1); ;; anycast flag
                            if (anycast == 1)
                                    {
                                        throw(55);
                                        bdst.store_uint(depth, 32).store_slice(anc); ;;writing anycast
                                    }
                            dst = bdst.store_int(-1, 8) ;; workchain_id: -1
                                    .store_uint(dstint, 256)
                                    .end_cell()
                                    .begin_parse();

                        }
                        elseif (addr_type_src == 3)
                                ;;      addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
                                ;;      workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
                                {
                                    if (cs.slice_bits() < 42 ) {
                                        return invalid_message;
                                    }
                                    int addr_len = cs~load_uint(9);
                                    int wc = cs~load_int(32);
                                    if (cs.slice_bits() < addr_len ) {
                                        return invalid_message;
                                    }
                                    int intdst = cs~load_uint(addr_len);
                                    dst = begin_cell()
                                            .store_uint(3,2) ;; addr_var$11
                                            .store_uint(0, 1) ;; anycast
                                            .store_uint(addr_len, 9) ;; addr_len
                                            .store_uint(intdst, addr_len)
                                            .end_cell()
                                            .begin_parse();
                                }

                                else {
                                    return invalid_message;
                                }
                if (cs.slice_bits() < 32 ){
                    return invalid_message;
                }
                grams = cs~load_grams();
            }

            elseif(msgtype == 1)
                    ;; external message
                    {
                        int ext_type = cs~load_uint(1);
                        if( ext_type > 1 ) {
                            return invalid_message;
                        }
                        if ( ext_type == 0)
                                ;; external in message ext -> int
                                ;;ext_in_msg_info$10 src:MsgAddressExt dest:MsgAddressInt
                                ;;import_fee:Grams = CommonMsgInfo;

                                ;;message$_ {X:Type} info:CommonMsgInfo
                                ;;init:(Maybe (Either StateInit ^StateInit))
                                ;;body:(Either X ^X) = Message X;
                                {
                                    {-ext in SRC -}
                                    ;;          addr_none$00 = MsgAddressExt;
                                    ;;          addr_extern$01 len:(## 9) external_address:(bits len)
                                    ;;              = MsgAddressExt;
                                    if (cs.slice_bits() < 2){
                                        return invalid_message;
                                    }
                                    int addr_type_src = cs~load_uint(2);
                                    if (addr_type_src == 0)
                                            ;;      addr_none$00 = MsgAddressExt;
                                            {
                                                src = null();
                                            }
                                            elseif (addr_type_src == 1 )
                                                    ;;          addr_extern$01 len:(## 9) external_address:(bits len)
                                                    ;;              = MsgAddressExt;
                                                    {
                                                        if (cs.slice_bits() < 10) {
                                                            return invalid_message;
                                                        }
                                                        int addr_len = cs~load_uint(9);
                                                        if (cs.slice_bits() < addr_len) {
                                                            return invalid_message;
                                                        }
                                                        int intsrc = cs~load_uint(addr_len);
                                                        src = begin_cell()
                                                                .store_uint(1, 2) ;;addr_extern$01
                                                                .store_uint(addr_len, 9) ;; addr_len
                                                                .store_uint(intsrc, addr_len) ;; addr
                                                                .end_cell()
                                                                .begin_parse();
                                                    }
                                                    else
                                                            {
                                                                return invalid_message;
                                                            }
                                    {-ext in DST-}
                                    ;;             anycast_info$_ depth:(#<= 30) { depth >= 1 }
                                    ;;                 rewrite_pfx:(bits depth) = Anycast;
                                    ;;                         addr_std$10 anycast:(Maybe Anycast)
                                    ;;                 workchain_id:int8 address:bits256  = MsgAddressInt;
                                    ;;                 addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
                                    ;;                 workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
                                    if (cs.slice_bits() < 3){
                                        return invalid_message;
                                    }

                                    int addr_type_dst = cs~load_uint(2);
                                    int anycast = cs~load_uint(1);
                                    if (anycast) {
                                        if (cs.slice_bits() < 33) {
                                            return invalid_message;
                                        }
                                        int depth = cs~load_uint(32);
                                        slice anc = cs~load_bits(depth); ;; save anycast
                                    }

                                    if (addr_type_dst == 2)
                                            ;;                 addr_std$10 anycast:(Maybe Anycast)
                                            ;;                 workchain_id:int8 address:bits256  = MsgAddressInt;
                                            {
                                                if (cs.slice_bits() < (8 + 256))
                                                        {
                                                            return invalid_message;
                                                        }
                                                int wc = cs~load_int(8);
                                                int dstint = cs~load_uint(256);
                                                dst = begin_cell()
                                                        .store_uint(2, 2) ;; addr_std$10
                                                        .store_uint(0, 1) ;; anycast nothing
                                                        .store_int(-1, 8) ;; workchain_id: -1
                                                        .store_uint(dstint, 256)
                                                        .end_cell()
                                                        .begin_parse();

                                            }
                                            elseif (addr_type_dst == 3)
                                                    ;;                 addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
                                                    ;;                 workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
                                                    {
                                                        if (cs.slice_bits() < 42 ) {
                                                            return invalid_message;
                                                        }
                                                        int addr_len = cs~load_uint(9);
                                                        int wc = cs~load_int(32);
                                                        if (cs.slice_bits() < addr_len ) {
                                                            return invalid_message;
                                                        }
                                                        int intdst = cs~load_uint(addr_len);
                                                        dst = begin_cell()
                                                                .store_uint(3,2) ;; addr_var$11
                                                                .store_uint(0, 1) ;; anycast
                                                                .store_uint(addr_len, 9) ;; addr_len
                                                                .store_uint(intdst, addr_len)
                                                                .end_cell()
                                                                .begin_parse();
                                                    }

                                }
                                elseif (ext_type == 1)
                                        ;; external out message int -> ext
                                        ;; ext_out_msg_info$11 src:MsgAddressInt dest:MsgAddressExt
                                        ;; created_lt:uint64 created_at:uint32 = CommonMsgInfo;

                                        ;;message$_ {X:Type} info:CommonMsgInfo
                                        ;;init:(Maybe (Either StateInit ^StateInit))
                                        ;;body:(Either X ^X) = Message X;
                                        {
                                            {-SRC external out-}
                                            ;;             anycast_info$_ depth:(#<= 30) { depth >= 1 }
                                            ;;                 rewrite_pfx:(bits depth) = Anycast;
                                            ;;                         addr_std$10 anycast:(Maybe Anycast)
                                            ;;                 workchain_id:int8 address:bits256  = MsgAddressInt;
                                            ;;                 addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
                                            ;;                 workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
                                            if (cs.slice_bits() < 3){
                                                return invalid_message;
                                            }

                                            int addr_type_src = cs~load_uint(2);
                                            int anycast = cs~load_uint(1);
                                            if (anycast) {
                                                if (cs.slice_bits() < 33) {
                                                    return invalid_message;
                                                }
                                                int depth = cs~load_uint(32);
                                                slice anc = cs~load_bits(depth); ;; save anycast
                                            }

                                            if (addr_type_src == 2)
                                                    ;;                 addr_std$10 anycast:(Maybe Anycast)
                                                    ;;                 workchain_id:int8 address:bits256  = MsgAddressInt;
                                                    {
                                                        if (cs.slice_bits() < (8 + 256))
                                                                {
                                                                    return invalid_message;
                                                                }
                                                        int wc = cs~load_int(8);
                                                        int srcint = cs~load_uint(256);
                                                        src = begin_cell()
                                                                .store_uint(2, 2) ;; addr_std$10
                                                                .store_uint(0, 1) ;; anycast nothing
                                                                .store_int(-1, 8) ;; workchain_id: -1
                                                                .store_uint(srcint, 256)
                                                                .end_cell()
                                                                .begin_parse();

                                                    }
                                                    elseif (addr_type_src == 3)
                                                            ;;                 addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
                                                            ;;                 workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
                                                            {
                                                                if (cs.slice_bits() < 42 ) {
                                                                    return invalid_message;
                                                                }
                                                                int addr_len = cs~load_uint(9);
                                                                int wc = cs~load_int(32);
                                                                if (cs.slice_bits() < addr_len ) {
                                                                    return invalid_message;
                                                                }
                                                                int intsrc = cs~load_uint(addr_len);
                                                                dst = begin_cell()
                                                                        .store_uint(3,2) ;; addr_var$11
                                                                        .store_uint(0, 1) ;; anycast
                                                                        .store_uint(addr_len, 9) ;; addr_len
                                                                        .store_uint(intsrc, addr_len)
                                                                        .end_cell()
                                                                        .begin_parse();
                                                            }

                                            {-DST external out-}
                                            ;;          addr_none$00 = MsgAddressExt;
                                            ;;          addr_extern$01 len:(## 9) external_address:(bits len)
                                            ;;               = MsgAddressExt;
                                            if (cs.slice_bits()< 2) {
                                                return invalid_message;
                                            }
                                            int addrtype = cs~load_uint(2);
                                            if (addrtype == 0)
                                                    {
                                                        ;;          addr_none$00 = MsgAddressExt;
                                                        dst = null();
                                                    }
                                                    elseif (addrtype == 1 )
                                                            {
                                                                ;;          addr_extern$01 len:(## 9) external_address:(bits len)
                                                                ;;               = MsgAddressExt;
                                                                if (cs.slice_bits() < 10 ) {
                                                                    return invalid_message;
                                                                }
                                                                int addr_len = cs~load_uint(9);
                                                                if (cs.slice_bits() < addr_len){
                                                                    return invalid_message;
                                                                }
                                                                int intdst = cs~load_uint(addr_len);
                                                                dst = begin_cell()
                                                                        .store_uint(1, 2) ;;addr_extern$01
                                                                        .store_uint(addr_len, 9) ;; addr_len
                                                                        .store_uint(intdst, addr_len) ;; addr
                                                                        .end_cell()
                                                                        .begin_parse();
                                                            }
                                                            else
                                                                    {
                                                                        return invalid_message;
                                                                    }
                                        }

                                        else { throw(64); }

                    }
    return (-1, unsafe_tuple([src, dst, grams]));

}